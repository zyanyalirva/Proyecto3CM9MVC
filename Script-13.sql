create table Categoria(
  idCategoria int not null GENERATED BY DEFAULT AS IDENTITY primary key,
  nombreCategoria varchar(50) not null,
  descripcionCategoria varchar(150) not null
);

create table Usuario (
	idUsuario int not null GENERATED BY DEFAULT AS IDENTITY primary key,
    nombre varchar(64) not null,
    paterno varchar(64) not null,
    materno varchar(64) not null,
    email varchar(64) not null,
    nombreUsuario varchar(128) not null,
    claveUsuario varchar(32) not null,
    tipoUsuario varchar(32) not null
);

create table Producto (
	idProducto int not null GENERATED BY DEFAULT AS IDENTITY primary key,
	idCategoria int not null,
    nombreProducto varchar(64) not null,
    descripcionProducto varchar(256) not null,
    precio double precision not null,
    existencia int not null,
    foreign key (idCategoria) references Categoria(idcategoria) on delete cascade on update cascade 
);

/*INICIA PROCEDIMIENTOS CATEGORIA*/
--Insertar categorias
create or replace function spInsertarCategoria(in nombre varchar(50), in descripcion varchar(150)) returns void as $$
begin 
	insert into categoria (nombreCategoria, descripcionCategoria) values (nombre, descripcion);
end;
$$ LANGUAGE plpgsql;

select spInsertarCategoria('HOLA', 'MUNDO');

-- Actualizar categoria
create or replace function spActualizarCategoria(in nombre varchar(50), in descripcion varchar(150), in id int) returns void as $$
begin 
	update categoria set nombreCategoria = nombre, descripcionCategoria = descripcion where idCategoria = id;
end;
$$ LANGUAGE plpgsql;

select spActualizarCategoria('HOLA', 'MUNDITO', 1);

-- Borrar categoria
create or replace function spBorrarCategoria(in id int) returns void as $$
begin 
	delete from categoria where idCategoria = id;
end;
$$ language plpgsql;

select spBorrarCategoria(1);

-- Mostrar todas las categorías
create or replace function spMostrarCategorias() returns setof categoria as 'select * from categoria;' language 'sql';

select spMostrarCategorias();

-- Mostrar una categoría
create or replace function spVerCategoria(in id int) returns setof categoria as $$
begin
	return query select * from categoria where idCategoria = id;
end;
$$ language plpgsql;

select spVerCategoria(2);

/*TERMINA PROCEDIMIENTOS CATEGORIA*/

/*INICIA PROCEDIMIENTOS USUARIO */
-- Registrar usuario
create or replace function spInsertarUsuario(in nombreU varchar(64), in paternoU varchar(64), in maternoU varchar(64), in mail varchar(64), in username varchar(128), in pwd varchar(32), in userType varchar(32)) returns void as $$
begin 
	insert into Usuario (nombre, paterno, materno, email, nombreUsuario, claveUsuario, tipoUsuario) values (nombreU, paternoU, maternoU, mail, username, md5(pwd), usertype);
end;
$$ LANGUAGE plpgsql;

select spInsertarUsuario('Ricardo', 'Almazán', 'Trejo', 'almazan624@gmail.com', 'iRichie', 'n0m3l0s3', 'Admin');

-- Validar nombre de usuario y contraseña 
create or replace function spValidarUsuario(in username varchar(128), in pwd varchar(32)) returns setof Usuario as $$
begin
	return query select * from usuario u where nombreUsuario = username and claveUsuario = md5(pwd); 
end;
$$ LANGUAGE plpgsql;

select spValidarUsuario('iRichie', 'n0m3l0s3');

-- Actualizar usuario
create or replace function spActualizarUsuario(in id int, in nombreU varchar(64), in paternoU varchar(64), in maternoU varchar(64), in mail varchar(64), in username varchar(128),  in userType varchar(32)) returns void as $$
begin 
	update usuario set nombre = nombreU, paterno = paternoU, materno = maternoU, email = mail, nombreUsuario = username, tipoUsuario = usertype where idUsuario = id;
end;
$$ language plpgsql;

select spActualizarUsuario(1, 'Ricardo', 'Almazán', 'Trejo', 'almazan624@gmail.com', 'iRichie', 'Admin');

-- Mostrar todos los usuarios
create or replace function spMostrarUsuarios() returns setof Usuario as 'select * from Usuario;' language 'sql';

select spMostrarUsuarios();

-- Mostrar usuario 
create or replace function spVerUsuario(in id int) returns setof Usuario as $$
begin
	return query select * from usuario where idUsuario = id;
end;
$$ language plpgsql;

select spVerUsuario(2);

-- Borrar usuario
create or replace function spBorrarUsuario(in id int) returns void as $$
begin 
	delete from Usuario where idUsuario = id;
end;
$$ language plpgsql;

select spBorrarUsuario(2);

/*TERMINA PROCEDIMIENTOS USUARIO*/

/* INICIA PROCEDIMIENTOS PRODUCTOS */
-- Insertar producto
create or replace function spInsertarProducto(in idCat int, in nombre varchar(50), in descripcion varchar(150), in precioP double precision, in existenciaP int) returns void as $$
begin 
	insert into producto (idCategoria, nombreProducto, descripcionProducto, precio, existencia) values (idCat, nombre, descripcion, precioP, existenciaP);
end;
$$ LANGUAGE plpgsql;

select spInsertarProducto(2, 'Producto1', 'prod', 1111, 1);

-- Actualizar producto
create or replace function spActualizarProducto(in id int, in idCat int, in nombre varchar(50), in descripcion varchar(150), in precioP double precision, in existenciaP int) returns void as $$
begin 
	update producto set idCategoria = idCat, nombreProducto = nombre, descripcionProducto = descripcion, precio = precioP, existencia = existenciaP where idProducto = id;
end;
$$ LANGUAGE plpgsql;

select spActualizarProducto(1, 2, 'Producto1', 'prod1', 1111, 1);

-- Borrar producto
create or replace function spBorrarProducto(in id int) returns void as $$
begin 
	delete from producto where idProducto = id;
end;
$$ language plpgsql;

select spBorrarProducto(1);

-- Mostrar todos los productos
create or replace function spMostrarProductos() returns setof producto as 'select * from producto;' language 'sql';

select spMostrarProductos();

-- Mostrar un producto
create or replace function spVerProducto(in id int) returns setof producto as $$
begin
	return query select * from producto where idProducto = id;
end;
$$ language plpgsql;

select spVerProducto(1);

/* TERMINA PROCEDIMIENTOS PRODUCTOS*/